/*
 * This file is generated by jOOQ.
 */
package co.petrin.ekristijan.db.tables.records;


import co.petrin.ekristijan.db.tables.Departure;

import java.time.OffsetDateTime;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * A record of when a pupil had left school
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DepartureRecord extends UpdatableRecordImpl<DepartureRecord> implements Record8<Integer, Integer, Integer, OffsetDateTime, Boolean, String, OffsetDateTime, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.departure.departure_id</code>.
     */
    public void setDepartureId(@Nonnull Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.departure.departure_id</code>.
     */
    @Nonnull
    public Integer getDepartureId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.departure.pupil_id</code>. The pupil who left
     */
    public void setPupilId(@Nonnull Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.departure.pupil_id</code>. The pupil who left
     */
    @Nonnull
    public Integer getPupilId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.departure.teacher_id</code>. The teacher
     * confirming the kid has left the school (if any)
     */
    public void setTeacherId(@Nullable Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.departure.teacher_id</code>. The teacher
     * confirming the kid has left the school (if any)
     */
    @Nullable
    public Integer getTeacherId() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>public.departure.time</code>. The time at which the kid
     * has left school
     */
    public void setTime(@Nonnull OffsetDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.departure.time</code>. The time at which the kid
     * has left school
     */
    @Nonnull
    public OffsetDateTime getTime() {
        return (OffsetDateTime) get(3);
    }

    /**
     * Setter for <code>public.departure.entire_day</code>. Did the pupil miss
     * the entire day, i.e. did not come to school at all?
     */
    public void setEntireDay(@Nonnull Boolean value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.departure.entire_day</code>. Did the pupil miss
     * the entire day, i.e. did not come to school at all?
     */
    @Nonnull
    public Boolean getEntireDay() {
        return (Boolean) get(4);
    }

    /**
     * Setter for <code>public.departure.remark</code>. Any extra remarks about
     * the departure (e.g. sick that day, on vacation)
     */
    public void setRemark(@Nullable String value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.departure.remark</code>. Any extra remarks about
     * the departure (e.g. sick that day, on vacation)
     */
    @Nullable
    public String getRemark() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.departure.cancelled_at</code>. If the departure
     * was later invalidated, the date at which it was cancelled is given here.
     * Serves as the discriminator for invalid departures
     */
    public void setCancelledAt(@Nullable OffsetDateTime value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.departure.cancelled_at</code>. If the departure
     * was later invalidated, the date at which it was cancelled is given here.
     * Serves as the discriminator for invalid departures
     */
    @Nullable
    public OffsetDateTime getCancelledAt() {
        return (OffsetDateTime) get(6);
    }

    /**
     * Setter for <code>public.departure.cancelled_by_teacher_id</code>. If the
     * departure was later invalidated, the teacher who invalidated it is given
     * here
     */
    public void setCancelledByTeacherId(@Nullable Integer value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.departure.cancelled_by_teacher_id</code>. If the
     * departure was later invalidated, the teacher who invalidated it is given
     * here
     */
    @Nullable
    public Integer getCancelledByTeacherId() {
        return (Integer) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row8<Integer, Integer, Integer, OffsetDateTime, Boolean, String, OffsetDateTime, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    @Nonnull
    public Row8<Integer, Integer, Integer, OffsetDateTime, Boolean, String, OffsetDateTime, Integer> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    @Nonnull
    public Field<Integer> field1() {
        return Departure.DEPARTURE.DEPARTURE_ID;
    }

    @Override
    @Nonnull
    public Field<Integer> field2() {
        return Departure.DEPARTURE.PUPIL_ID;
    }

    @Override
    @Nonnull
    public Field<Integer> field3() {
        return Departure.DEPARTURE.TEACHER_ID;
    }

    @Override
    @Nonnull
    public Field<OffsetDateTime> field4() {
        return Departure.DEPARTURE.TIME;
    }

    @Override
    @Nonnull
    public Field<Boolean> field5() {
        return Departure.DEPARTURE.ENTIRE_DAY;
    }

    @Override
    @Nonnull
    public Field<String> field6() {
        return Departure.DEPARTURE.REMARK;
    }

    @Override
    @Nonnull
    public Field<OffsetDateTime> field7() {
        return Departure.DEPARTURE.CANCELLED_AT;
    }

    @Override
    @Nonnull
    public Field<Integer> field8() {
        return Departure.DEPARTURE.CANCELLED_BY_TEACHER_ID;
    }

    @Override
    @Nonnull
    public Integer component1() {
        return getDepartureId();
    }

    @Override
    @Nonnull
    public Integer component2() {
        return getPupilId();
    }

    @Override
    @Nullable
    public Integer component3() {
        return getTeacherId();
    }

    @Override
    @Nonnull
    public OffsetDateTime component4() {
        return getTime();
    }

    @Override
    @Nonnull
    public Boolean component5() {
        return getEntireDay();
    }

    @Override
    @Nullable
    public String component6() {
        return getRemark();
    }

    @Override
    @Nullable
    public OffsetDateTime component7() {
        return getCancelledAt();
    }

    @Override
    @Nullable
    public Integer component8() {
        return getCancelledByTeacherId();
    }

    @Override
    @Nonnull
    public Integer value1() {
        return getDepartureId();
    }

    @Override
    @Nonnull
    public Integer value2() {
        return getPupilId();
    }

    @Override
    @Nullable
    public Integer value3() {
        return getTeacherId();
    }

    @Override
    @Nonnull
    public OffsetDateTime value4() {
        return getTime();
    }

    @Override
    @Nonnull
    public Boolean value5() {
        return getEntireDay();
    }

    @Override
    @Nullable
    public String value6() {
        return getRemark();
    }

    @Override
    @Nullable
    public OffsetDateTime value7() {
        return getCancelledAt();
    }

    @Override
    @Nullable
    public Integer value8() {
        return getCancelledByTeacherId();
    }

    @Override
    @Nonnull
    public DepartureRecord value1(@Nonnull Integer value) {
        setDepartureId(value);
        return this;
    }

    @Override
    @Nonnull
    public DepartureRecord value2(@Nonnull Integer value) {
        setPupilId(value);
        return this;
    }

    @Override
    @Nonnull
    public DepartureRecord value3(@Nullable Integer value) {
        setTeacherId(value);
        return this;
    }

    @Override
    @Nonnull
    public DepartureRecord value4(@Nonnull OffsetDateTime value) {
        setTime(value);
        return this;
    }

    @Override
    @Nonnull
    public DepartureRecord value5(@Nonnull Boolean value) {
        setEntireDay(value);
        return this;
    }

    @Override
    @Nonnull
    public DepartureRecord value6(@Nullable String value) {
        setRemark(value);
        return this;
    }

    @Override
    @Nonnull
    public DepartureRecord value7(@Nullable OffsetDateTime value) {
        setCancelledAt(value);
        return this;
    }

    @Override
    @Nonnull
    public DepartureRecord value8(@Nullable Integer value) {
        setCancelledByTeacherId(value);
        return this;
    }

    @Override
    @Nonnull
    public DepartureRecord values(@Nonnull Integer value1, @Nonnull Integer value2, @Nullable Integer value3, @Nonnull OffsetDateTime value4, @Nonnull Boolean value5, @Nullable String value6, @Nullable OffsetDateTime value7, @Nullable Integer value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DepartureRecord
     */
    public DepartureRecord() {
        super(Departure.DEPARTURE);
    }

    /**
     * Create a detached, initialised DepartureRecord
     */
    public DepartureRecord(@Nonnull Integer departureId, @Nonnull Integer pupilId, @Nullable Integer teacherId, @Nonnull OffsetDateTime time, @Nonnull Boolean entireDay, @Nullable String remark, @Nullable OffsetDateTime cancelledAt, @Nullable Integer cancelledByTeacherId) {
        super(Departure.DEPARTURE);

        setDepartureId(departureId);
        setPupilId(pupilId);
        setTeacherId(teacherId);
        setTime(time);
        setEntireDay(entireDay);
        setRemark(remark);
        setCancelledAt(cancelledAt);
        setCancelledByTeacherId(cancelledByTeacherId);
    }
}
