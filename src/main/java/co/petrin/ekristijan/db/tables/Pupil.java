/*
 * This file is generated by jOOQ.
 */
package co.petrin.ekristijan.db.tables;


import co.petrin.ekristijan.db.Keys;
import co.petrin.ekristijan.db.Public;
import co.petrin.ekristijan.db.tables.records.PupilRecord;

import java.time.LocalTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.Nonnull;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * A pupil whose departures we are tracking
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Pupil extends TableImpl<PupilRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.pupil</code>
     */
    public static final Pupil PUPIL = new Pupil();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<PupilRecord> getRecordType() {
        return PupilRecord.class;
    }

    /**
     * The column <code>public.pupil.pupil_id</code>.
     */
    public final TableField<PupilRecord, Integer> PUPIL_ID = createField(DSL.name("pupil_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.pupil.school_id</code>. School this pupil is from
     */
    public final TableField<PupilRecord, Integer> SCHOOL_ID = createField(DSL.name("school_id"), SQLDataType.INTEGER.nullable(false), this, "School this pupil is from");

    /**
     * The column <code>public.pupil.clazz</code>. The class this pupil belongs
     * to (class is a reserved word in languages, thus clazz)
     */
    public final TableField<PupilRecord, String> CLAZZ = createField(DSL.name("clazz"), SQLDataType.CLOB.nullable(false), this, "The class this pupil belongs to (class is a reserved word in languages, thus clazz)");

    /**
     * The column <code>public.pupil.leaves_alone</code>. Can this pupil leave
     * school on their own?
     */
    public final TableField<PupilRecord, Boolean> LEAVES_ALONE = createField(DSL.name("leaves_alone"), SQLDataType.BOOLEAN.nullable(false), this, "Can this pupil leave school on their own?");

    /**
     * The column <code>public.pupil.leave_mon</code>. The time at which this
     * pupil will leave school every monday
     */
    public final TableField<PupilRecord, LocalTime> LEAVE_MON = createField(DSL.name("leave_mon"), SQLDataType.LOCALTIME(6), this, "The time at which this pupil will leave school every monday");

    /**
     * The column <code>public.pupil.leave_tue</code>. The time at which this
     * pupil will leave school every tuesday
     */
    public final TableField<PupilRecord, LocalTime> LEAVE_TUE = createField(DSL.name("leave_tue"), SQLDataType.LOCALTIME(6), this, "The time at which this pupil will leave school every tuesday");

    /**
     * The column <code>public.pupil.leave_wed</code>. The time at which this
     * pupil will leave school every wednesday
     */
    public final TableField<PupilRecord, LocalTime> LEAVE_WED = createField(DSL.name("leave_wed"), SQLDataType.LOCALTIME(6), this, "The time at which this pupil will leave school every wednesday");

    /**
     * The column <code>public.pupil.leave_thu</code>. The time at which this
     * pupil will leave school every thursday
     */
    public final TableField<PupilRecord, LocalTime> LEAVE_THU = createField(DSL.name("leave_thu"), SQLDataType.LOCALTIME(6), this, "The time at which this pupil will leave school every thursday");

    /**
     * The column <code>public.pupil.leave_fri</code>. The time at which this
     * pupil will leave school every friday
     */
    public final TableField<PupilRecord, LocalTime> LEAVE_FRI = createField(DSL.name("leave_fri"), SQLDataType.LOCALTIME(6), this, "The time at which this pupil will leave school every friday");

    /**
     * The column <code>public.pupil.given_name</code>. First name of pupil
     */
    public final TableField<PupilRecord, String> GIVEN_NAME = createField(DSL.name("given_name"), SQLDataType.CLOB.nullable(false), this, "First name of pupil");

    /**
     * The column <code>public.pupil.family_name</code>. Last name of pupil
     */
    public final TableField<PupilRecord, String> FAMILY_NAME = createField(DSL.name("family_name"), SQLDataType.CLOB.nullable(false), this, "Last name of pupil");

    private Pupil(Name alias, Table<PupilRecord> aliased) {
        this(alias, aliased, null);
    }

    private Pupil(Name alias, Table<PupilRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("A pupil whose departures we are tracking"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.pupil</code> table reference
     */
    public Pupil(String alias) {
        this(DSL.name(alias), PUPIL);
    }

    /**
     * Create an aliased <code>public.pupil</code> table reference
     */
    public Pupil(Name alias) {
        this(alias, PUPIL);
    }

    /**
     * Create a <code>public.pupil</code> table reference
     */
    public Pupil() {
        this(DSL.name("pupil"), null);
    }

    public <O extends Record> Pupil(Table<O> child, ForeignKey<O, PupilRecord> key) {
        super(child, key, PUPIL);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public Identity<PupilRecord, Integer> getIdentity() {
        return (Identity<PupilRecord, Integer>) super.getIdentity();
    }

    @Override
    @Nonnull
    public UniqueKey<PupilRecord> getPrimaryKey() {
        return Keys.PUPIL_PKEY;
    }

    @Override
    @Nonnull
    public List<ForeignKey<PupilRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PUPIL__PUPIL_SCHOOL_ID_FKEY);
    }

    private transient School _school;

    /**
     * Get the implicit join path to the <code>public.school</code> table.
     */
    public School school() {
        if (_school == null)
            _school = new School(this, Keys.PUPIL__PUPIL_SCHOOL_ID_FKEY);

        return _school;
    }

    @Override
    @Nonnull
    public Pupil as(String alias) {
        return new Pupil(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public Pupil as(Name alias) {
        return new Pupil(alias, this);
    }

    @Override
    @Nonnull
    public Pupil as(Table<?> alias) {
        return new Pupil(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Pupil rename(String name) {
        return new Pupil(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Pupil rename(Name name) {
        return new Pupil(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Pupil rename(Table<?> name) {
        return new Pupil(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row11<Integer, Integer, String, Boolean, LocalTime, LocalTime, LocalTime, LocalTime, LocalTime, String, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function11<? super Integer, ? super Integer, ? super String, ? super Boolean, ? super LocalTime, ? super LocalTime, ? super LocalTime, ? super LocalTime, ? super LocalTime, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function11<? super Integer, ? super Integer, ? super String, ? super Boolean, ? super LocalTime, ? super LocalTime, ? super LocalTime, ? super LocalTime, ? super LocalTime, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
