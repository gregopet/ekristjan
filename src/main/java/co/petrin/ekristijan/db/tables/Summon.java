/*
 * This file is generated by jOOQ.
 */
package co.petrin.ekristijan.db.tables;


import co.petrin.ekristijan.db.Keys;
import co.petrin.ekristijan.db.Public;
import co.petrin.ekristijan.db.tables.records.SummonRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.Nonnull;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * A request for the pupil to come to the door
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Summon extends TableImpl<SummonRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.summon</code>
     */
    public static final Summon SUMMON = new Summon();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<SummonRecord> getRecordType() {
        return SummonRecord.class;
    }

    /**
     * The column <code>public.summon.summon_id</code>.
     */
    public final TableField<SummonRecord, Integer> SUMMON_ID = createField(DSL.name("summon_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.summon.pupil_id</code>. Pupil that was summoned
     */
    public final TableField<SummonRecord, Integer> PUPIL_ID = createField(DSL.name("pupil_id"), SQLDataType.INTEGER.nullable(false), this, "Pupil that was summoned");

    /**
     * The column <code>public.summon.teacher_id</code>. Teacher who issued the
     * summon
     */
    public final TableField<SummonRecord, Integer> TEACHER_ID = createField(DSL.name("teacher_id"), SQLDataType.INTEGER.nullable(false), this, "Teacher who issued the summon");

    /**
     * The column <code>public.summon.time</code>. Time at which the summon was
     * triggered
     */
    public final TableField<SummonRecord, OffsetDateTime> TIME = createField(DSL.name("time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Time at which the summon was triggered");

    private Summon(Name alias, Table<SummonRecord> aliased) {
        this(alias, aliased, null);
    }

    private Summon(Name alias, Table<SummonRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("A request for the pupil to come to the door"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.summon</code> table reference
     */
    public Summon(String alias) {
        this(DSL.name(alias), SUMMON);
    }

    /**
     * Create an aliased <code>public.summon</code> table reference
     */
    public Summon(Name alias) {
        this(alias, SUMMON);
    }

    /**
     * Create a <code>public.summon</code> table reference
     */
    public Summon() {
        this(DSL.name("summon"), null);
    }

    public <O extends Record> Summon(Table<O> child, ForeignKey<O, SummonRecord> key) {
        super(child, key, SUMMON);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public Identity<SummonRecord, Integer> getIdentity() {
        return (Identity<SummonRecord, Integer>) super.getIdentity();
    }

    @Override
    @Nonnull
    public UniqueKey<SummonRecord> getPrimaryKey() {
        return Keys.SUMMON_PKEY;
    }

    @Override
    @Nonnull
    public List<ForeignKey<SummonRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SUMMON__SUMMON_PUPIL_ID_FKEY, Keys.SUMMON__SUMMON_TEACHER_ID_FKEY);
    }

    private transient Pupil _pupil;
    private transient Teacher _teacher;

    /**
     * Get the implicit join path to the <code>public.pupil</code> table.
     */
    public Pupil pupil() {
        if (_pupil == null)
            _pupil = new Pupil(this, Keys.SUMMON__SUMMON_PUPIL_ID_FKEY);

        return _pupil;
    }

    /**
     * Get the implicit join path to the <code>public.teacher</code> table.
     */
    public Teacher teacher() {
        if (_teacher == null)
            _teacher = new Teacher(this, Keys.SUMMON__SUMMON_TEACHER_ID_FKEY);

        return _teacher;
    }

    @Override
    @Nonnull
    public Summon as(String alias) {
        return new Summon(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public Summon as(Name alias) {
        return new Summon(alias, this);
    }

    @Override
    @Nonnull
    public Summon as(Table<?> alias) {
        return new Summon(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Summon rename(String name) {
        return new Summon(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Summon rename(Name name) {
        return new Summon(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Summon rename(Table<?> name) {
        return new Summon(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row4<Integer, Integer, Integer, OffsetDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super Integer, ? super Integer, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super Integer, ? super Integer, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
