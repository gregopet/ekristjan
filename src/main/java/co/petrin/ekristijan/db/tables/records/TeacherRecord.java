/*
 * This file is generated by jOOQ.
 */
package co.petrin.ekristijan.db.tables.records;


import co.petrin.ekristijan.db.tables.Teacher;

import java.time.OffsetDateTime;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * A teacher authorized to supervise children
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TeacherRecord extends UpdatableRecordImpl<TeacherRecord> implements Record8<Integer, Integer, String, String, String, OffsetDateTime, Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.teacher.teacher_id</code>.
     */
    public void setTeacherId(@Nonnull Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.teacher.teacher_id</code>.
     */
    @Nonnull
    public Integer getTeacherId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.teacher.school_id</code>. School this teacher is
     * from
     */
    public void setSchoolId(@Nonnull Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.teacher.school_id</code>. School this teacher is
     * from
     */
    @Nonnull
    public Integer getSchoolId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.teacher.name</code>. The name of this school
     */
    public void setName(@Nonnull String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.teacher.name</code>. The name of this school
     */
    @Nonnull
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.teacher.email</code>. The teacher's email (used
     * for password resets)
     */
    public void setEmail(@Nonnull String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.teacher.email</code>. The teacher's email (used
     * for password resets)
     */
    @Nonnull
    public String getEmail() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.teacher.password_hash</code>. Hashed password of
     * this teacher
     */
    public void setPasswordHash(@Nullable String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.teacher.password_hash</code>. Hashed password of
     * this teacher
     */
    @Nullable
    public String getPasswordHash() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.teacher.password_last_attempt</code>. Time at
     * which the last password change was attempted
     */
    public void setPasswordLastAttempt(@Nullable OffsetDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.teacher.password_last_attempt</code>. Time at
     * which the last password change was attempted
     */
    @Nullable
    public OffsetDateTime getPasswordLastAttempt() {
        return (OffsetDateTime) get(5);
    }

    /**
     * Setter for <code>public.teacher.password_last_attempt_count</code>.
     * Number of times wrong password was entered in current attempt timeframe
     * (the timeframe's length is application defined)
     */
    public void setPasswordLastAttemptCount(@Nonnull Integer value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.teacher.password_last_attempt_count</code>.
     * Number of times wrong password was entered in current attempt timeframe
     * (the timeframe's length is application defined)
     */
    @Nonnull
    public Integer getPasswordLastAttemptCount() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>public.teacher.password_reset_generation</code>. A
     * counter on the current generation of password resets (no older
     * generations are valid)
     */
    public void setPasswordResetGeneration(@Nonnull Integer value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.teacher.password_reset_generation</code>. A
     * counter on the current generation of password resets (no older
     * generations are valid)
     */
    @Nonnull
    public Integer getPasswordResetGeneration() {
        return (Integer) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row8<Integer, Integer, String, String, String, OffsetDateTime, Integer, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    @Nonnull
    public Row8<Integer, Integer, String, String, String, OffsetDateTime, Integer, Integer> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    @Nonnull
    public Field<Integer> field1() {
        return Teacher.TEACHER.TEACHER_ID;
    }

    @Override
    @Nonnull
    public Field<Integer> field2() {
        return Teacher.TEACHER.SCHOOL_ID;
    }

    @Override
    @Nonnull
    public Field<String> field3() {
        return Teacher.TEACHER.NAME;
    }

    @Override
    @Nonnull
    public Field<String> field4() {
        return Teacher.TEACHER.EMAIL;
    }

    @Override
    @Nonnull
    public Field<String> field5() {
        return Teacher.TEACHER.PASSWORD_HASH;
    }

    @Override
    @Nonnull
    public Field<OffsetDateTime> field6() {
        return Teacher.TEACHER.PASSWORD_LAST_ATTEMPT;
    }

    @Override
    @Nonnull
    public Field<Integer> field7() {
        return Teacher.TEACHER.PASSWORD_LAST_ATTEMPT_COUNT;
    }

    @Override
    @Nonnull
    public Field<Integer> field8() {
        return Teacher.TEACHER.PASSWORD_RESET_GENERATION;
    }

    @Override
    @Nonnull
    public Integer component1() {
        return getTeacherId();
    }

    @Override
    @Nonnull
    public Integer component2() {
        return getSchoolId();
    }

    @Override
    @Nonnull
    public String component3() {
        return getName();
    }

    @Override
    @Nonnull
    public String component4() {
        return getEmail();
    }

    @Override
    @Nullable
    public String component5() {
        return getPasswordHash();
    }

    @Override
    @Nullable
    public OffsetDateTime component6() {
        return getPasswordLastAttempt();
    }

    @Override
    @Nonnull
    public Integer component7() {
        return getPasswordLastAttemptCount();
    }

    @Override
    @Nonnull
    public Integer component8() {
        return getPasswordResetGeneration();
    }

    @Override
    @Nonnull
    public Integer value1() {
        return getTeacherId();
    }

    @Override
    @Nonnull
    public Integer value2() {
        return getSchoolId();
    }

    @Override
    @Nonnull
    public String value3() {
        return getName();
    }

    @Override
    @Nonnull
    public String value4() {
        return getEmail();
    }

    @Override
    @Nullable
    public String value5() {
        return getPasswordHash();
    }

    @Override
    @Nullable
    public OffsetDateTime value6() {
        return getPasswordLastAttempt();
    }

    @Override
    @Nonnull
    public Integer value7() {
        return getPasswordLastAttemptCount();
    }

    @Override
    @Nonnull
    public Integer value8() {
        return getPasswordResetGeneration();
    }

    @Override
    @Nonnull
    public TeacherRecord value1(@Nonnull Integer value) {
        setTeacherId(value);
        return this;
    }

    @Override
    @Nonnull
    public TeacherRecord value2(@Nonnull Integer value) {
        setSchoolId(value);
        return this;
    }

    @Override
    @Nonnull
    public TeacherRecord value3(@Nonnull String value) {
        setName(value);
        return this;
    }

    @Override
    @Nonnull
    public TeacherRecord value4(@Nonnull String value) {
        setEmail(value);
        return this;
    }

    @Override
    @Nonnull
    public TeacherRecord value5(@Nullable String value) {
        setPasswordHash(value);
        return this;
    }

    @Override
    @Nonnull
    public TeacherRecord value6(@Nullable OffsetDateTime value) {
        setPasswordLastAttempt(value);
        return this;
    }

    @Override
    @Nonnull
    public TeacherRecord value7(@Nonnull Integer value) {
        setPasswordLastAttemptCount(value);
        return this;
    }

    @Override
    @Nonnull
    public TeacherRecord value8(@Nonnull Integer value) {
        setPasswordResetGeneration(value);
        return this;
    }

    @Override
    @Nonnull
    public TeacherRecord values(@Nonnull Integer value1, @Nonnull Integer value2, @Nonnull String value3, @Nonnull String value4, @Nullable String value5, @Nullable OffsetDateTime value6, @Nonnull Integer value7, @Nonnull Integer value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TeacherRecord
     */
    public TeacherRecord() {
        super(Teacher.TEACHER);
    }

    /**
     * Create a detached, initialised TeacherRecord
     */
    public TeacherRecord(@Nonnull Integer teacherId, @Nonnull Integer schoolId, @Nonnull String name, @Nonnull String email, @Nullable String passwordHash, @Nullable OffsetDateTime passwordLastAttempt, @Nonnull Integer passwordLastAttemptCount, @Nonnull Integer passwordResetGeneration) {
        super(Teacher.TEACHER);

        setTeacherId(teacherId);
        setSchoolId(schoolId);
        setName(name);
        setEmail(email);
        setPasswordHash(passwordHash);
        setPasswordLastAttempt(passwordLastAttempt);
        setPasswordLastAttemptCount(passwordLastAttemptCount);
        setPasswordResetGeneration(passwordResetGeneration);
    }
}
