/*
 * This file is generated by jOOQ.
 */
package co.petrin.ekristijan.db.tables;


import co.petrin.ekristijan.db.Indexes;
import co.petrin.ekristijan.db.Keys;
import co.petrin.ekristijan.db.Public;
import co.petrin.ekristijan.db.tables.records.ExtraordinaryDepartureRecord;

import java.time.LocalDate;
import java.time.LocalTime;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.Nonnull;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * A planned departure at a non-standard time about which the teacher must be
 * notified. Guaranteed there is only one extraordinary departure per day!
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExtraordinaryDeparture extends TableImpl<ExtraordinaryDepartureRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.extraordinary_departure</code>
     */
    public static final ExtraordinaryDeparture EXTRAORDINARY_DEPARTURE = new ExtraordinaryDeparture();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<ExtraordinaryDepartureRecord> getRecordType() {
        return ExtraordinaryDepartureRecord.class;
    }

    /**
     * The column
     * <code>public.extraordinary_departure.extraordinary_departure_id</code>.
     */
    public final TableField<ExtraordinaryDepartureRecord, Integer> EXTRAORDINARY_DEPARTURE_ID = createField(DSL.name("extraordinary_departure_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.extraordinary_departure.pupil_id</code>. The
     * pupil who will leave at a non-standard time
     */
    public final TableField<ExtraordinaryDepartureRecord, Integer> PUPIL_ID = createField(DSL.name("pupil_id"), SQLDataType.INTEGER.nullable(false), this, "The pupil who will leave at a non-standard time");

    /**
     * The column <code>public.extraordinary_departure.teacher_id</code>. The
     * teacher who recorded the non-standard departure
     */
    public final TableField<ExtraordinaryDepartureRecord, Integer> TEACHER_ID = createField(DSL.name("teacher_id"), SQLDataType.INTEGER, this, "The teacher who recorded the non-standard departure");

    /**
     * The column <code>public.extraordinary_departure.date</code>. The day on
     * which the student is planned to leave
     */
    public final TableField<ExtraordinaryDepartureRecord, LocalDate> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATE.nullable(false), this, "The day on which the student is planned to leave");

    /**
     * The column <code>public.extraordinary_departure.time</code>. The time at
     * which the student is planned to leave
     */
    public final TableField<ExtraordinaryDepartureRecord, LocalTime> TIME = createField(DSL.name("time"), SQLDataType.LOCALTIME(6).nullable(false), this, "The time at which the student is planned to leave");

    /**
     * The column <code>public.extraordinary_departure.leaves_alone</code>. Is
     * the pupil allowed to leave alone (without a parent fetching them)?
     * Overrides the pupil's setting.
     */
    public final TableField<ExtraordinaryDepartureRecord, Boolean> LEAVES_ALONE = createField(DSL.name("leaves_alone"), SQLDataType.BOOLEAN, this, "Is the pupil allowed to leave alone (without a parent fetching them)? Overrides the pupil's setting.");

    /**
     * The column <code>public.extraordinary_departure.remark</code>. Any
     * special remarks about this departure?
     */
    public final TableField<ExtraordinaryDepartureRecord, String> REMARK = createField(DSL.name("remark"), SQLDataType.CLOB, this, "Any special remarks about this departure?");

    /**
     * The column <code>public.extraordinary_departure.created_at</code>.
     */
    public final TableField<ExtraordinaryDepartureRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private ExtraordinaryDeparture(Name alias, Table<ExtraordinaryDepartureRecord> aliased) {
        this(alias, aliased, null);
    }

    private ExtraordinaryDeparture(Name alias, Table<ExtraordinaryDepartureRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("A planned departure at a non-standard time about which the teacher must be notified. Guaranteed there is only one extraordinary departure per day!"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.extraordinary_departure</code> table
     * reference
     */
    public ExtraordinaryDeparture(String alias) {
        this(DSL.name(alias), EXTRAORDINARY_DEPARTURE);
    }

    /**
     * Create an aliased <code>public.extraordinary_departure</code> table
     * reference
     */
    public ExtraordinaryDeparture(Name alias) {
        this(alias, EXTRAORDINARY_DEPARTURE);
    }

    /**
     * Create a <code>public.extraordinary_departure</code> table reference
     */
    public ExtraordinaryDeparture() {
        this(DSL.name("extraordinary_departure"), null);
    }

    public <O extends Record> ExtraordinaryDeparture(Table<O> child, ForeignKey<O, ExtraordinaryDepartureRecord> key) {
        super(child, key, EXTRAORDINARY_DEPARTURE);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_EXTRAORDINARY_DEPARTURE_PUPIL);
    }

    @Override
    @Nonnull
    public Identity<ExtraordinaryDepartureRecord, Integer> getIdentity() {
        return (Identity<ExtraordinaryDepartureRecord, Integer>) super.getIdentity();
    }

    @Override
    @Nonnull
    public UniqueKey<ExtraordinaryDepartureRecord> getPrimaryKey() {
        return Keys.EXTRAORDINARY_DEPARTURE_PKEY;
    }

    @Override
    @Nonnull
    public List<UniqueKey<ExtraordinaryDepartureRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.EXTRAORDINARY_DEPARTURE_DATE_PUPIL_ID_KEY);
    }

    @Override
    @Nonnull
    public List<ForeignKey<ExtraordinaryDepartureRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EXTRAORDINARY_DEPARTURE__EXTRAORDINARY_DEPARTURE_PUPIL_ID_FKEY, Keys.EXTRAORDINARY_DEPARTURE__EXTRAORDINARY_DEPARTURE_TEACHER_ID_FKEY);
    }

    private transient Pupil _pupil;
    private transient Teacher _teacher;

    /**
     * Get the implicit join path to the <code>public.pupil</code> table.
     */
    public Pupil pupil() {
        if (_pupil == null)
            _pupil = new Pupil(this, Keys.EXTRAORDINARY_DEPARTURE__EXTRAORDINARY_DEPARTURE_PUPIL_ID_FKEY);

        return _pupil;
    }

    /**
     * Get the implicit join path to the <code>public.teacher</code> table.
     */
    public Teacher teacher() {
        if (_teacher == null)
            _teacher = new Teacher(this, Keys.EXTRAORDINARY_DEPARTURE__EXTRAORDINARY_DEPARTURE_TEACHER_ID_FKEY);

        return _teacher;
    }

    @Override
    @Nonnull
    public ExtraordinaryDeparture as(String alias) {
        return new ExtraordinaryDeparture(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public ExtraordinaryDeparture as(Name alias) {
        return new ExtraordinaryDeparture(alias, this);
    }

    @Override
    @Nonnull
    public ExtraordinaryDeparture as(Table<?> alias) {
        return new ExtraordinaryDeparture(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ExtraordinaryDeparture rename(String name) {
        return new ExtraordinaryDeparture(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ExtraordinaryDeparture rename(Name name) {
        return new ExtraordinaryDeparture(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ExtraordinaryDeparture rename(Table<?> name) {
        return new ExtraordinaryDeparture(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row8<Integer, Integer, Integer, LocalDate, LocalTime, Boolean, String, OffsetDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Integer, ? super Integer, ? super Integer, ? super LocalDate, ? super LocalTime, ? super Boolean, ? super String, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Integer, ? super Integer, ? super Integer, ? super LocalDate, ? super LocalTime, ? super Boolean, ? super String, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
