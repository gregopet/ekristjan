/*
 * This file is generated by jOOQ.
 */
package co.petrin.ekristijan.db.tables;


import co.petrin.ekristijan.db.Keys;
import co.petrin.ekristijan.db.Public;
import co.petrin.ekristijan.db.tables.records.PasswordResetRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.Nonnull;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * A password reset request
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PasswordReset extends TableImpl<PasswordResetRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.password_reset</code>
     */
    public static final PasswordReset PASSWORD_RESET = new PasswordReset();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<PasswordResetRecord> getRecordType() {
        return PasswordResetRecord.class;
    }

    /**
     * The column <code>public.password_reset.password_reset_id</code>.
     */
    public final TableField<PasswordResetRecord, Integer> PASSWORD_RESET_ID = createField(DSL.name("password_reset_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.password_reset.teacher_id</code>. The teacher who
     * requested the password reset
     */
    public final TableField<PasswordResetRecord, Integer> TEACHER_ID = createField(DSL.name("teacher_id"), SQLDataType.INTEGER.nullable(false), this, "The teacher who requested the password reset");

    /**
     * The column <code>public.password_reset.created_at</code>. The time at
     * which the password reset was issued
     */
    public final TableField<PasswordResetRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "The time at which the password reset was issued");

    /**
     * The column <code>public.password_reset.token</code>. The secret token
     * that needs to match for the password to be changed
     */
    public final TableField<PasswordResetRecord, String> TOKEN = createField(DSL.name("token"), SQLDataType.CLOB.nullable(false), this, "The secret token that needs to match for the password to be changed");

    /**
     * The column <code>public.password_reset.spent</code>. Was this token spent
     * (and is thus not valid anymore)?
     */
    public final TableField<PasswordResetRecord, Boolean> SPENT = createField(DSL.name("spent"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "Was this token spent (and is thus not valid anymore)?");

    private PasswordReset(Name alias, Table<PasswordResetRecord> aliased) {
        this(alias, aliased, null);
    }

    private PasswordReset(Name alias, Table<PasswordResetRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("A password reset request"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.password_reset</code> table reference
     */
    public PasswordReset(String alias) {
        this(DSL.name(alias), PASSWORD_RESET);
    }

    /**
     * Create an aliased <code>public.password_reset</code> table reference
     */
    public PasswordReset(Name alias) {
        this(alias, PASSWORD_RESET);
    }

    /**
     * Create a <code>public.password_reset</code> table reference
     */
    public PasswordReset() {
        this(DSL.name("password_reset"), null);
    }

    public <O extends Record> PasswordReset(Table<O> child, ForeignKey<O, PasswordResetRecord> key) {
        super(child, key, PASSWORD_RESET);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public Identity<PasswordResetRecord, Integer> getIdentity() {
        return (Identity<PasswordResetRecord, Integer>) super.getIdentity();
    }

    @Override
    @Nonnull
    public UniqueKey<PasswordResetRecord> getPrimaryKey() {
        return Keys.PASSWORD_RESET_PKEY;
    }

    @Override
    @Nonnull
    public List<ForeignKey<PasswordResetRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PASSWORD_RESET__PASSWORD_RESET_TEACHER_ID_FKEY);
    }

    private transient Teacher _teacher;

    /**
     * Get the implicit join path to the <code>public.teacher</code> table.
     */
    public Teacher teacher() {
        if (_teacher == null)
            _teacher = new Teacher(this, Keys.PASSWORD_RESET__PASSWORD_RESET_TEACHER_ID_FKEY);

        return _teacher;
    }

    @Override
    @Nonnull
    public PasswordReset as(String alias) {
        return new PasswordReset(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public PasswordReset as(Name alias) {
        return new PasswordReset(alias, this);
    }

    @Override
    @Nonnull
    public PasswordReset as(Table<?> alias) {
        return new PasswordReset(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public PasswordReset rename(String name) {
        return new PasswordReset(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public PasswordReset rename(Name name) {
        return new PasswordReset(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public PasswordReset rename(Table<?> name) {
        return new PasswordReset(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row5<Integer, Integer, OffsetDateTime, String, Boolean> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super Integer, ? super OffsetDateTime, ? super String, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super Integer, ? super OffsetDateTime, ? super String, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
