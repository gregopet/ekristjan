/*
 * This file is generated by jOOQ.
 */
package co.petrin.ekristijan.db.tables.records;


import co.petrin.ekristijan.db.tables.ExtraordinaryDeparture;

import java.time.LocalDate;
import java.time.LocalTime;
import java.time.OffsetDateTime;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * A planned departure at a non-standard time about which the teacher must be
 * notified. Guaranteed there is only one extraordinary departure per day!
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExtraordinaryDepartureRecord extends UpdatableRecordImpl<ExtraordinaryDepartureRecord> implements Record8<Integer, Integer, Integer, LocalDate, LocalTime, Boolean, String, OffsetDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>public.extraordinary_departure.extraordinary_departure_id</code>.
     */
    public void setExtraordinaryDepartureId(@Nonnull Integer value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>public.extraordinary_departure.extraordinary_departure_id</code>.
     */
    @Nonnull
    public Integer getExtraordinaryDepartureId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.extraordinary_departure.pupil_id</code>. The
     * pupil who will leave at a non-standard time
     */
    public void setPupilId(@Nonnull Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.extraordinary_departure.pupil_id</code>. The
     * pupil who will leave at a non-standard time
     */
    @Nonnull
    public Integer getPupilId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.extraordinary_departure.teacher_id</code>. The
     * teacher who recorded the non-standard departure
     */
    public void setTeacherId(@Nullable Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.extraordinary_departure.teacher_id</code>. The
     * teacher who recorded the non-standard departure
     */
    @Nullable
    public Integer getTeacherId() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>public.extraordinary_departure.date</code>. The day on
     * which the student is planned to leave
     */
    public void setDate(@Nonnull LocalDate value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.extraordinary_departure.date</code>. The day on
     * which the student is planned to leave
     */
    @Nonnull
    public LocalDate getDate() {
        return (LocalDate) get(3);
    }

    /**
     * Setter for <code>public.extraordinary_departure.time</code>. The time at
     * which the student is planned to leave
     */
    public void setTime(@Nonnull LocalTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.extraordinary_departure.time</code>. The time at
     * which the student is planned to leave
     */
    @Nonnull
    public LocalTime getTime() {
        return (LocalTime) get(4);
    }

    /**
     * Setter for <code>public.extraordinary_departure.leaves_alone</code>. Is
     * the pupil allowed to leave alone (without a parent fetching them)?
     * Overrides the pupil's setting.
     */
    public void setLeavesAlone(@Nullable Boolean value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.extraordinary_departure.leaves_alone</code>. Is
     * the pupil allowed to leave alone (without a parent fetching them)?
     * Overrides the pupil's setting.
     */
    @Nullable
    public Boolean getLeavesAlone() {
        return (Boolean) get(5);
    }

    /**
     * Setter for <code>public.extraordinary_departure.remark</code>. Any
     * special remarks about this departure?
     */
    public void setRemark(@Nullable String value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.extraordinary_departure.remark</code>. Any
     * special remarks about this departure?
     */
    @Nullable
    public String getRemark() {
        return (String) get(6);
    }

    /**
     * Setter for <code>public.extraordinary_departure.created_at</code>.
     */
    public void setCreatedAt(@Nonnull OffsetDateTime value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.extraordinary_departure.created_at</code>.
     */
    @Nonnull
    public OffsetDateTime getCreatedAt() {
        return (OffsetDateTime) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row8<Integer, Integer, Integer, LocalDate, LocalTime, Boolean, String, OffsetDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    @Nonnull
    public Row8<Integer, Integer, Integer, LocalDate, LocalTime, Boolean, String, OffsetDateTime> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    @Nonnull
    public Field<Integer> field1() {
        return ExtraordinaryDeparture.EXTRAORDINARY_DEPARTURE.EXTRAORDINARY_DEPARTURE_ID;
    }

    @Override
    @Nonnull
    public Field<Integer> field2() {
        return ExtraordinaryDeparture.EXTRAORDINARY_DEPARTURE.PUPIL_ID;
    }

    @Override
    @Nonnull
    public Field<Integer> field3() {
        return ExtraordinaryDeparture.EXTRAORDINARY_DEPARTURE.TEACHER_ID;
    }

    @Override
    @Nonnull
    public Field<LocalDate> field4() {
        return ExtraordinaryDeparture.EXTRAORDINARY_DEPARTURE.DATE;
    }

    @Override
    @Nonnull
    public Field<LocalTime> field5() {
        return ExtraordinaryDeparture.EXTRAORDINARY_DEPARTURE.TIME;
    }

    @Override
    @Nonnull
    public Field<Boolean> field6() {
        return ExtraordinaryDeparture.EXTRAORDINARY_DEPARTURE.LEAVES_ALONE;
    }

    @Override
    @Nonnull
    public Field<String> field7() {
        return ExtraordinaryDeparture.EXTRAORDINARY_DEPARTURE.REMARK;
    }

    @Override
    @Nonnull
    public Field<OffsetDateTime> field8() {
        return ExtraordinaryDeparture.EXTRAORDINARY_DEPARTURE.CREATED_AT;
    }

    @Override
    @Nonnull
    public Integer component1() {
        return getExtraordinaryDepartureId();
    }

    @Override
    @Nonnull
    public Integer component2() {
        return getPupilId();
    }

    @Override
    @Nullable
    public Integer component3() {
        return getTeacherId();
    }

    @Override
    @Nonnull
    public LocalDate component4() {
        return getDate();
    }

    @Override
    @Nonnull
    public LocalTime component5() {
        return getTime();
    }

    @Override
    @Nullable
    public Boolean component6() {
        return getLeavesAlone();
    }

    @Override
    @Nullable
    public String component7() {
        return getRemark();
    }

    @Override
    @Nonnull
    public OffsetDateTime component8() {
        return getCreatedAt();
    }

    @Override
    @Nonnull
    public Integer value1() {
        return getExtraordinaryDepartureId();
    }

    @Override
    @Nonnull
    public Integer value2() {
        return getPupilId();
    }

    @Override
    @Nullable
    public Integer value3() {
        return getTeacherId();
    }

    @Override
    @Nonnull
    public LocalDate value4() {
        return getDate();
    }

    @Override
    @Nonnull
    public LocalTime value5() {
        return getTime();
    }

    @Override
    @Nullable
    public Boolean value6() {
        return getLeavesAlone();
    }

    @Override
    @Nullable
    public String value7() {
        return getRemark();
    }

    @Override
    @Nonnull
    public OffsetDateTime value8() {
        return getCreatedAt();
    }

    @Override
    @Nonnull
    public ExtraordinaryDepartureRecord value1(@Nonnull Integer value) {
        setExtraordinaryDepartureId(value);
        return this;
    }

    @Override
    @Nonnull
    public ExtraordinaryDepartureRecord value2(@Nonnull Integer value) {
        setPupilId(value);
        return this;
    }

    @Override
    @Nonnull
    public ExtraordinaryDepartureRecord value3(@Nullable Integer value) {
        setTeacherId(value);
        return this;
    }

    @Override
    @Nonnull
    public ExtraordinaryDepartureRecord value4(@Nonnull LocalDate value) {
        setDate(value);
        return this;
    }

    @Override
    @Nonnull
    public ExtraordinaryDepartureRecord value5(@Nonnull LocalTime value) {
        setTime(value);
        return this;
    }

    @Override
    @Nonnull
    public ExtraordinaryDepartureRecord value6(@Nullable Boolean value) {
        setLeavesAlone(value);
        return this;
    }

    @Override
    @Nonnull
    public ExtraordinaryDepartureRecord value7(@Nullable String value) {
        setRemark(value);
        return this;
    }

    @Override
    @Nonnull
    public ExtraordinaryDepartureRecord value8(@Nonnull OffsetDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    @Nonnull
    public ExtraordinaryDepartureRecord values(@Nonnull Integer value1, @Nonnull Integer value2, @Nullable Integer value3, @Nonnull LocalDate value4, @Nonnull LocalTime value5, @Nullable Boolean value6, @Nullable String value7, @Nonnull OffsetDateTime value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ExtraordinaryDepartureRecord
     */
    public ExtraordinaryDepartureRecord() {
        super(ExtraordinaryDeparture.EXTRAORDINARY_DEPARTURE);
    }

    /**
     * Create a detached, initialised ExtraordinaryDepartureRecord
     */
    public ExtraordinaryDepartureRecord(@Nonnull Integer extraordinaryDepartureId, @Nonnull Integer pupilId, @Nullable Integer teacherId, @Nonnull LocalDate date, @Nonnull LocalTime time, @Nullable Boolean leavesAlone, @Nullable String remark, @Nonnull OffsetDateTime createdAt) {
        super(ExtraordinaryDeparture.EXTRAORDINARY_DEPARTURE);

        setExtraordinaryDepartureId(extraordinaryDepartureId);
        setPupilId(pupilId);
        setTeacherId(teacherId);
        setDate(date);
        setTime(time);
        setLeavesAlone(leavesAlone);
        setRemark(remark);
        setCreatedAt(createdAt);
    }
}
