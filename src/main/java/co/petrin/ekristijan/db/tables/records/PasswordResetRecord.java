/*
 * This file is generated by jOOQ.
 */
package co.petrin.ekristijan.db.tables.records;


import co.petrin.ekristijan.db.tables.PasswordReset;

import java.time.OffsetDateTime;

import javax.annotation.Nonnull;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * A password reset request
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PasswordResetRecord extends UpdatableRecordImpl<PasswordResetRecord> implements Record5<Integer, Integer, OffsetDateTime, String, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.password_reset.password_reset_id</code>.
     */
    public void setPasswordResetId(@Nonnull Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.password_reset.password_reset_id</code>.
     */
    @Nonnull
    public Integer getPasswordResetId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.password_reset.teacher_id</code>. The teacher who
     * requested the password reset
     */
    public void setTeacherId(@Nonnull Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.password_reset.teacher_id</code>. The teacher who
     * requested the password reset
     */
    @Nonnull
    public Integer getTeacherId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.password_reset.created_at</code>. The time at
     * which the password reset was issued
     */
    public void setCreatedAt(@Nonnull OffsetDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.password_reset.created_at</code>. The time at
     * which the password reset was issued
     */
    @Nonnull
    public OffsetDateTime getCreatedAt() {
        return (OffsetDateTime) get(2);
    }

    /**
     * Setter for <code>public.password_reset.token</code>. The secret token
     * that needs to match for the password to be changed
     */
    public void setToken(@Nonnull String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.password_reset.token</code>. The secret token
     * that needs to match for the password to be changed
     */
    @Nonnull
    public String getToken() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.password_reset.spent</code>. Was this token spent
     * (and is thus not valid anymore)?
     */
    public void setSpent(@Nonnull Boolean value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.password_reset.spent</code>. Was this token spent
     * (and is thus not valid anymore)?
     */
    @Nonnull
    public Boolean getSpent() {
        return (Boolean) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row5<Integer, Integer, OffsetDateTime, String, Boolean> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    @Nonnull
    public Row5<Integer, Integer, OffsetDateTime, String, Boolean> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    @Nonnull
    public Field<Integer> field1() {
        return PasswordReset.PASSWORD_RESET.PASSWORD_RESET_ID;
    }

    @Override
    @Nonnull
    public Field<Integer> field2() {
        return PasswordReset.PASSWORD_RESET.TEACHER_ID;
    }

    @Override
    @Nonnull
    public Field<OffsetDateTime> field3() {
        return PasswordReset.PASSWORD_RESET.CREATED_AT;
    }

    @Override
    @Nonnull
    public Field<String> field4() {
        return PasswordReset.PASSWORD_RESET.TOKEN;
    }

    @Override
    @Nonnull
    public Field<Boolean> field5() {
        return PasswordReset.PASSWORD_RESET.SPENT;
    }

    @Override
    @Nonnull
    public Integer component1() {
        return getPasswordResetId();
    }

    @Override
    @Nonnull
    public Integer component2() {
        return getTeacherId();
    }

    @Override
    @Nonnull
    public OffsetDateTime component3() {
        return getCreatedAt();
    }

    @Override
    @Nonnull
    public String component4() {
        return getToken();
    }

    @Override
    @Nonnull
    public Boolean component5() {
        return getSpent();
    }

    @Override
    @Nonnull
    public Integer value1() {
        return getPasswordResetId();
    }

    @Override
    @Nonnull
    public Integer value2() {
        return getTeacherId();
    }

    @Override
    @Nonnull
    public OffsetDateTime value3() {
        return getCreatedAt();
    }

    @Override
    @Nonnull
    public String value4() {
        return getToken();
    }

    @Override
    @Nonnull
    public Boolean value5() {
        return getSpent();
    }

    @Override
    @Nonnull
    public PasswordResetRecord value1(@Nonnull Integer value) {
        setPasswordResetId(value);
        return this;
    }

    @Override
    @Nonnull
    public PasswordResetRecord value2(@Nonnull Integer value) {
        setTeacherId(value);
        return this;
    }

    @Override
    @Nonnull
    public PasswordResetRecord value3(@Nonnull OffsetDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    @Nonnull
    public PasswordResetRecord value4(@Nonnull String value) {
        setToken(value);
        return this;
    }

    @Override
    @Nonnull
    public PasswordResetRecord value5(@Nonnull Boolean value) {
        setSpent(value);
        return this;
    }

    @Override
    @Nonnull
    public PasswordResetRecord values(@Nonnull Integer value1, @Nonnull Integer value2, @Nonnull OffsetDateTime value3, @Nonnull String value4, @Nonnull Boolean value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PasswordResetRecord
     */
    public PasswordResetRecord() {
        super(PasswordReset.PASSWORD_RESET);
    }

    /**
     * Create a detached, initialised PasswordResetRecord
     */
    public PasswordResetRecord(@Nonnull Integer passwordResetId, @Nonnull Integer teacherId, @Nonnull OffsetDateTime createdAt, @Nonnull String token, @Nonnull Boolean spent) {
        super(PasswordReset.PASSWORD_RESET);

        setPasswordResetId(passwordResetId);
        setTeacherId(teacherId);
        setCreatedAt(createdAt);
        setToken(token);
        setSpent(spent);
    }
}
