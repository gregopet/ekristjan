/*
 * This file is generated by jOOQ.
 */
package co.petrin.ekristijan.db.tables;


import co.petrin.ekristijan.db.Keys;
import co.petrin.ekristijan.db.Public;
import co.petrin.ekristijan.db.tables.records.RegisteredDeviceRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.Nonnull;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * A device registered to receive notifications, 
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RegisteredDevice extends TableImpl<RegisteredDeviceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.registered_device</code>
     */
    public static final RegisteredDevice REGISTERED_DEVICE = new RegisteredDevice();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<RegisteredDeviceRecord> getRecordType() {
        return RegisteredDeviceRecord.class;
    }

    /**
     * The column <code>public.registered_device.registered_device_id</code>.
     */
    public final TableField<RegisteredDeviceRecord, Integer> REGISTERED_DEVICE_ID = createField(DSL.name("registered_device_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.registered_device.last_teacher_id</code>. The
     * teacher most recently logged into this device
     */
    public final TableField<RegisteredDeviceRecord, Integer> LAST_TEACHER_ID = createField(DSL.name("last_teacher_id"), SQLDataType.INTEGER.nullable(false), this, "The teacher most recently logged into this device");

    /**
     * The column <code>public.registered_device.user_agent</code>. User-Agent
     * of the device that can be used to identify its type
     */
    public final TableField<RegisteredDeviceRecord, String> USER_AGENT = createField(DSL.name("user_agent"), SQLDataType.CLOB, this, "User-Agent of the device that can be used to identify its type");

    /**
     * The column <code>public.registered_device.push_endpoint</code>. The
     * endpoint to which a push notification must be made. It is unique but can
     * possibly be null for devices that don't support push
     */
    public final TableField<RegisteredDeviceRecord, String> PUSH_ENDPOINT = createField(DSL.name("push_endpoint"), SQLDataType.CLOB, this, "The endpoint to which a push notification must be made. It is unique but can possibly be null for devices that don't support push");

    /**
     * The column <code>public.registered_device.push_auth</code>. The push
     * notification authentication secret
     */
    public final TableField<RegisteredDeviceRecord, String> PUSH_AUTH = createField(DSL.name("push_auth"), SQLDataType.CLOB, this, "The push notification authentication secret");

    /**
     * The column <code>public.registered_device.push_p256dh</code>. The push
     * notification authentication public key
     */
    public final TableField<RegisteredDeviceRecord, String> PUSH_P256DH = createField(DSL.name("push_p256dh"), SQLDataType.CLOB, this, "The push notification authentication public key");

    /**
     * The column <code>public.registered_device.classes</code>. The classes
     * this device wants to receive notifications for
     */
    public final TableField<RegisteredDeviceRecord, String[]> CLASSES = createField(DSL.name("classes"), SQLDataType.CLOB.getArrayDataType(), this, "The classes this device wants to receive notifications for");

    /**
     * The column <code>public.registered_device.created_at</code>. The date on
     * which this device was first seen
     */
    public final TableField<RegisteredDeviceRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "The date on which this device was first seen");

    private RegisteredDevice(Name alias, Table<RegisteredDeviceRecord> aliased) {
        this(alias, aliased, null);
    }

    private RegisteredDevice(Name alias, Table<RegisteredDeviceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("A device registered to receive notifications, "), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.registered_device</code> table reference
     */
    public RegisteredDevice(String alias) {
        this(DSL.name(alias), REGISTERED_DEVICE);
    }

    /**
     * Create an aliased <code>public.registered_device</code> table reference
     */
    public RegisteredDevice(Name alias) {
        this(alias, REGISTERED_DEVICE);
    }

    /**
     * Create a <code>public.registered_device</code> table reference
     */
    public RegisteredDevice() {
        this(DSL.name("registered_device"), null);
    }

    public <O extends Record> RegisteredDevice(Table<O> child, ForeignKey<O, RegisteredDeviceRecord> key) {
        super(child, key, REGISTERED_DEVICE);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public Identity<RegisteredDeviceRecord, Integer> getIdentity() {
        return (Identity<RegisteredDeviceRecord, Integer>) super.getIdentity();
    }

    @Override
    @Nonnull
    public UniqueKey<RegisteredDeviceRecord> getPrimaryKey() {
        return Keys.REGISTERED_DEVICE_PKEY;
    }

    @Override
    @Nonnull
    public List<UniqueKey<RegisteredDeviceRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.REGISTERED_DEVICE_PUSH_ENDPOINT_KEY);
    }

    @Override
    @Nonnull
    public List<ForeignKey<RegisteredDeviceRecord, ?>> getReferences() {
        return Arrays.asList(Keys.REGISTERED_DEVICE__REGISTERED_DEVICE_LAST_TEACHER_ID_FKEY);
    }

    private transient Teacher _teacher;

    /**
     * Get the implicit join path to the <code>public.teacher</code> table.
     */
    public Teacher teacher() {
        if (_teacher == null)
            _teacher = new Teacher(this, Keys.REGISTERED_DEVICE__REGISTERED_DEVICE_LAST_TEACHER_ID_FKEY);

        return _teacher;
    }

    @Override
    @Nonnull
    public RegisteredDevice as(String alias) {
        return new RegisteredDevice(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public RegisteredDevice as(Name alias) {
        return new RegisteredDevice(alias, this);
    }

    @Override
    @Nonnull
    public RegisteredDevice as(Table<?> alias) {
        return new RegisteredDevice(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public RegisteredDevice rename(String name) {
        return new RegisteredDevice(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public RegisteredDevice rename(Name name) {
        return new RegisteredDevice(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public RegisteredDevice rename(Table<?> name) {
        return new RegisteredDevice(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row8<Integer, Integer, String, String, String, String, String[], OffsetDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Integer, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String[], ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Integer, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String[], ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
