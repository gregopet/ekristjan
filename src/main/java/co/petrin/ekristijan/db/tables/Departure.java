/*
 * This file is generated by jOOQ.
 */
package co.petrin.ekristijan.db.tables;


import co.petrin.ekristijan.db.Indexes;
import co.petrin.ekristijan.db.Keys;
import co.petrin.ekristijan.db.Public;
import co.petrin.ekristijan.db.tables.records.DepartureRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.Nonnull;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * A record of when a pupil had left school
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Departure extends TableImpl<DepartureRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.departure</code>
     */
    public static final Departure DEPARTURE = new Departure();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<DepartureRecord> getRecordType() {
        return DepartureRecord.class;
    }

    /**
     * The column <code>public.departure.departure_id</code>.
     */
    public final TableField<DepartureRecord, Integer> DEPARTURE_ID = createField(DSL.name("departure_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.departure.pupil_id</code>. The pupil who left
     */
    public final TableField<DepartureRecord, Integer> PUPIL_ID = createField(DSL.name("pupil_id"), SQLDataType.INTEGER.nullable(false), this, "The pupil who left");

    /**
     * The column <code>public.departure.teacher_id</code>. The teacher
     * confirming the kid has left the school (if any)
     */
    public final TableField<DepartureRecord, Integer> TEACHER_ID = createField(DSL.name("teacher_id"), SQLDataType.INTEGER, this, "The teacher confirming the kid has left the school (if any)");

    /**
     * The column <code>public.departure.time</code>. The time at which the kid
     * has left school
     */
    public final TableField<DepartureRecord, OffsetDateTime> TIME = createField(DSL.name("time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "The time at which the kid has left school");

    /**
     * The column <code>public.departure.entire_day</code>. Did the pupil miss
     * the entire day, i.e. did not come to school at all?
     */
    public final TableField<DepartureRecord, Boolean> ENTIRE_DAY = createField(DSL.name("entire_day"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "Did the pupil miss the entire day, i.e. did not come to school at all?");

    /**
     * The column <code>public.departure.remark</code>. Any extra remarks about
     * the departure (e.g. sick that day, on vacation)
     */
    public final TableField<DepartureRecord, String> REMARK = createField(DSL.name("remark"), SQLDataType.CLOB, this, "Any extra remarks about the departure (e.g. sick that day, on vacation)");

    private Departure(Name alias, Table<DepartureRecord> aliased) {
        this(alias, aliased, null);
    }

    private Departure(Name alias, Table<DepartureRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("A record of when a pupil had left school"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.departure</code> table reference
     */
    public Departure(String alias) {
        this(DSL.name(alias), DEPARTURE);
    }

    /**
     * Create an aliased <code>public.departure</code> table reference
     */
    public Departure(Name alias) {
        this(alias, DEPARTURE);
    }

    /**
     * Create a <code>public.departure</code> table reference
     */
    public Departure() {
        this(DSL.name("departure"), null);
    }

    public <O extends Record> Departure(Table<O> child, ForeignKey<O, DepartureRecord> key) {
        super(child, key, DEPARTURE);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_DEPARTURE_PUPIL);
    }

    @Override
    @Nonnull
    public Identity<DepartureRecord, Integer> getIdentity() {
        return (Identity<DepartureRecord, Integer>) super.getIdentity();
    }

    @Override
    @Nonnull
    public UniqueKey<DepartureRecord> getPrimaryKey() {
        return Keys.DEPARTURE_PKEY;
    }

    @Override
    @Nonnull
    public List<ForeignKey<DepartureRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DEPARTURE__DEPARTURE_PUPIL_ID_FKEY, Keys.DEPARTURE__DEPARTURE_TEACHER_ID_FKEY);
    }

    private transient Pupil _pupil;
    private transient Teacher _teacher;

    /**
     * Get the implicit join path to the <code>public.pupil</code> table.
     */
    public Pupil pupil() {
        if (_pupil == null)
            _pupil = new Pupil(this, Keys.DEPARTURE__DEPARTURE_PUPIL_ID_FKEY);

        return _pupil;
    }

    /**
     * Get the implicit join path to the <code>public.teacher</code> table.
     */
    public Teacher teacher() {
        if (_teacher == null)
            _teacher = new Teacher(this, Keys.DEPARTURE__DEPARTURE_TEACHER_ID_FKEY);

        return _teacher;
    }

    @Override
    @Nonnull
    public Departure as(String alias) {
        return new Departure(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public Departure as(Name alias) {
        return new Departure(alias, this);
    }

    @Override
    @Nonnull
    public Departure as(Table<?> alias) {
        return new Departure(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Departure rename(String name) {
        return new Departure(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Departure rename(Name name) {
        return new Departure(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Departure rename(Table<?> name) {
        return new Departure(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row6<Integer, Integer, Integer, OffsetDateTime, Boolean, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super Integer, ? super Integer, ? super OffsetDateTime, ? super Boolean, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super Integer, ? super Integer, ? super OffsetDateTime, ? super Boolean, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
