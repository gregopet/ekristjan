/*
 * This file is generated by jOOQ.
 */
package co.petrin.ekristijan.db.tables;


import co.petrin.ekristijan.db.Indexes;
import co.petrin.ekristijan.db.Keys;
import co.petrin.ekristijan.db.Public;
import co.petrin.ekristijan.db.tables.records.SummonAckRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.Nonnull;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SummonAck extends TableImpl<SummonAckRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.summon_ack</code>
     */
    public static final SummonAck SUMMON_ACK = new SummonAck();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<SummonAckRecord> getRecordType() {
        return SummonAckRecord.class;
    }

    /**
     * The column <code>public.summon_ack.summon_ack_id</code>.
     */
    public final TableField<SummonAckRecord, Integer> SUMMON_ACK_ID = createField(DSL.name("summon_ack_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.summon_ack.summon_id</code>. The summon that was
     * acknowledged
     */
    public final TableField<SummonAckRecord, Integer> SUMMON_ID = createField(DSL.name("summon_id"), SQLDataType.INTEGER.nullable(false), this, "The summon that was acknowledged");

    /**
     * The column <code>public.summon_ack.teacher_id</code>. Teacher who
     * acknowledged the summon
     */
    public final TableField<SummonAckRecord, Integer> TEACHER_ID = createField(DSL.name("teacher_id"), SQLDataType.INTEGER.nullable(false), this, "Teacher who acknowledged the summon");

    /**
     * The column <code>public.summon_ack.time</code>. Time at which the summon
     * was acknowledged
     */
    public final TableField<SummonAckRecord, OffsetDateTime> TIME = createField(DSL.name("time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "Time at which the summon was acknowledged");

    private SummonAck(Name alias, Table<SummonAckRecord> aliased) {
        this(alias, aliased, null);
    }

    private SummonAck(Name alias, Table<SummonAckRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.summon_ack</code> table reference
     */
    public SummonAck(String alias) {
        this(DSL.name(alias), SUMMON_ACK);
    }

    /**
     * Create an aliased <code>public.summon_ack</code> table reference
     */
    public SummonAck(Name alias) {
        this(alias, SUMMON_ACK);
    }

    /**
     * Create a <code>public.summon_ack</code> table reference
     */
    public SummonAck() {
        this(DSL.name("summon_ack"), null);
    }

    public <O extends Record> SummonAck(Table<O> child, ForeignKey<O, SummonAckRecord> key) {
        super(child, key, SUMMON_ACK);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SUMMON_ACK_SUMMON);
    }

    @Override
    @Nonnull
    public Identity<SummonAckRecord, Integer> getIdentity() {
        return (Identity<SummonAckRecord, Integer>) super.getIdentity();
    }

    @Override
    @Nonnull
    public UniqueKey<SummonAckRecord> getPrimaryKey() {
        return Keys.SUMMON_ACK_PKEY;
    }

    @Override
    @Nonnull
    public List<ForeignKey<SummonAckRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SUMMON_ACK__SUMMON_ACK_SUMMON_ID_FKEY, Keys.SUMMON_ACK__SUMMON_ACK_TEACHER_ID_FKEY);
    }

    private transient Summon _summon;
    private transient Teacher _teacher;

    /**
     * Get the implicit join path to the <code>public.summon</code> table.
     */
    public Summon summon() {
        if (_summon == null)
            _summon = new Summon(this, Keys.SUMMON_ACK__SUMMON_ACK_SUMMON_ID_FKEY);

        return _summon;
    }

    /**
     * Get the implicit join path to the <code>public.teacher</code> table.
     */
    public Teacher teacher() {
        if (_teacher == null)
            _teacher = new Teacher(this, Keys.SUMMON_ACK__SUMMON_ACK_TEACHER_ID_FKEY);

        return _teacher;
    }

    @Override
    @Nonnull
    public SummonAck as(String alias) {
        return new SummonAck(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public SummonAck as(Name alias) {
        return new SummonAck(alias, this);
    }

    @Override
    @Nonnull
    public SummonAck as(Table<?> alias) {
        return new SummonAck(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public SummonAck rename(String name) {
        return new SummonAck(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public SummonAck rename(Name name) {
        return new SummonAck(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public SummonAck rename(Table<?> name) {
        return new SummonAck(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row4<Integer, Integer, Integer, OffsetDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super Integer, ? super Integer, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super Integer, ? super Integer, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
