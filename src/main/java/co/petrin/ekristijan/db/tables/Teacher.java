/*
 * This file is generated by jOOQ.
 */
package co.petrin.ekristijan.db.tables;


import co.petrin.ekristijan.db.Keys;
import co.petrin.ekristijan.db.Public;
import co.petrin.ekristijan.db.tables.records.TeacherRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.Nonnull;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * A teacher authorized to supervise children
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Teacher extends TableImpl<TeacherRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.teacher</code>
     */
    public static final Teacher TEACHER = new Teacher();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<TeacherRecord> getRecordType() {
        return TeacherRecord.class;
    }

    /**
     * The column <code>public.teacher.teacher_id</code>.
     */
    public final TableField<TeacherRecord, Integer> TEACHER_ID = createField(DSL.name("teacher_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.teacher.school_id</code>. School this teacher is
     * from
     */
    public final TableField<TeacherRecord, Integer> SCHOOL_ID = createField(DSL.name("school_id"), SQLDataType.INTEGER.nullable(false), this, "School this teacher is from");

    /**
     * The column <code>public.teacher.name</code>. The name of this school
     */
    public final TableField<TeacherRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "The name of this school");

    /**
     * The column <code>public.teacher.email</code>. The teacher's email (used
     * for password resets)
     */
    public final TableField<TeacherRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.CLOB.nullable(false), this, "The teacher's email (used for password resets)");

    /**
     * The column <code>public.teacher.password_hash</code>. Hashed password of
     * this teacher
     */
    public final TableField<TeacherRecord, String> PASSWORD_HASH = createField(DSL.name("password_hash"), SQLDataType.CLOB, this, "Hashed password of this teacher");

    /**
     * The column <code>public.teacher.password_last_attempt</code>. Time at
     * which the last password change was attempted
     */
    public final TableField<TeacherRecord, OffsetDateTime> PASSWORD_LAST_ATTEMPT = createField(DSL.name("password_last_attempt"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Time at which the last password change was attempted");

    /**
     * The column <code>public.teacher.password_last_attempt_count</code>.
     * Number of times wrong password was entered in current attempt timeframe
     * (the timeframe's length is application defined)
     */
    public final TableField<TeacherRecord, Integer> PASSWORD_LAST_ATTEMPT_COUNT = createField(DSL.name("password_last_attempt_count"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "Number of times wrong password was entered in current attempt timeframe (the timeframe's length is application defined)");

    /**
     * The column <code>public.teacher.password_reset_generation</code>. A
     * counter on the current generation of password resets (no older
     * generations are valid)
     */
    public final TableField<TeacherRecord, Integer> PASSWORD_RESET_GENERATION = createField(DSL.name("password_reset_generation"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "A counter on the current generation of password resets (no older generations are valid)");

    /**
     * The column <code>public.teacher.enabled</code>. If not true, the teacher
     * cannot log in
     */
    public final TableField<TeacherRecord, Boolean> ENABLED = createField(DSL.name("enabled"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), this, "If not true, the teacher cannot log in");

    /**
     * The column <code>public.teacher.backoffice_access</code>. If true, the
     * teacher may access the backoffice part of the application
     */
    public final TableField<TeacherRecord, Boolean> BACKOFFICE_ACCESS = createField(DSL.name("backoffice_access"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "If true, the teacher may access the backoffice part of the application");

    private Teacher(Name alias, Table<TeacherRecord> aliased) {
        this(alias, aliased, null);
    }

    private Teacher(Name alias, Table<TeacherRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("A teacher authorized to supervise children"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.teacher</code> table reference
     */
    public Teacher(String alias) {
        this(DSL.name(alias), TEACHER);
    }

    /**
     * Create an aliased <code>public.teacher</code> table reference
     */
    public Teacher(Name alias) {
        this(alias, TEACHER);
    }

    /**
     * Create a <code>public.teacher</code> table reference
     */
    public Teacher() {
        this(DSL.name("teacher"), null);
    }

    public <O extends Record> Teacher(Table<O> child, ForeignKey<O, TeacherRecord> key) {
        super(child, key, TEACHER);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public Identity<TeacherRecord, Integer> getIdentity() {
        return (Identity<TeacherRecord, Integer>) super.getIdentity();
    }

    @Override
    @Nonnull
    public UniqueKey<TeacherRecord> getPrimaryKey() {
        return Keys.TEACHER_PKEY;
    }

    @Override
    @Nonnull
    public List<UniqueKey<TeacherRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.TEACHER_EMAIL_KEY);
    }

    @Override
    @Nonnull
    public List<ForeignKey<TeacherRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TEACHER__TEACHER_SCHOOL_ID_FKEY);
    }

    private transient School _school;

    /**
     * Get the implicit join path to the <code>public.school</code> table.
     */
    public School school() {
        if (_school == null)
            _school = new School(this, Keys.TEACHER__TEACHER_SCHOOL_ID_FKEY);

        return _school;
    }

    @Override
    @Nonnull
    public Teacher as(String alias) {
        return new Teacher(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public Teacher as(Name alias) {
        return new Teacher(alias, this);
    }

    @Override
    @Nonnull
    public Teacher as(Table<?> alias) {
        return new Teacher(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Teacher rename(String name) {
        return new Teacher(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Teacher rename(Name name) {
        return new Teacher(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Teacher rename(Table<?> name) {
        return new Teacher(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row10<Integer, Integer, String, String, String, OffsetDateTime, Integer, Integer, Boolean, Boolean> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Integer, ? super Integer, ? super String, ? super String, ? super String, ? super OffsetDateTime, ? super Integer, ? super Integer, ? super Boolean, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Integer, ? super Integer, ? super String, ? super String, ? super String, ? super OffsetDateTime, ? super Integer, ? super Integer, ? super Boolean, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
