/*
 * This file is generated by jOOQ.
 */
package co.petrin.ekristijan.db.tables;


import co.petrin.ekristijan.db.Keys;
import co.petrin.ekristijan.db.Public;
import co.petrin.ekristijan.db.tables.records.PupilActivityRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.Nonnull;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The mapping between pupils and their activities
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PupilActivity extends TableImpl<PupilActivityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.pupil_activity</code>
     */
    public static final PupilActivity PUPIL_ACTIVITY = new PupilActivity();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<PupilActivityRecord> getRecordType() {
        return PupilActivityRecord.class;
    }

    /**
     * The column <code>public.pupil_activity.pupil_id</code>.
     */
    public final TableField<PupilActivityRecord, Integer> PUPIL_ID = createField(DSL.name("pupil_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.pupil_activity.activity_id</code>.
     */
    public final TableField<PupilActivityRecord, Integer> ACTIVITY_ID = createField(DSL.name("activity_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private PupilActivity(Name alias, Table<PupilActivityRecord> aliased) {
        this(alias, aliased, null);
    }

    private PupilActivity(Name alias, Table<PupilActivityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("The mapping between pupils and their activities"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.pupil_activity</code> table reference
     */
    public PupilActivity(String alias) {
        this(DSL.name(alias), PUPIL_ACTIVITY);
    }

    /**
     * Create an aliased <code>public.pupil_activity</code> table reference
     */
    public PupilActivity(Name alias) {
        this(alias, PUPIL_ACTIVITY);
    }

    /**
     * Create a <code>public.pupil_activity</code> table reference
     */
    public PupilActivity() {
        this(DSL.name("pupil_activity"), null);
    }

    public <O extends Record> PupilActivity(Table<O> child, ForeignKey<O, PupilActivityRecord> key) {
        super(child, key, PUPIL_ACTIVITY);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<PupilActivityRecord> getPrimaryKey() {
        return Keys.PUPIL_ACTIVITY_PKEY;
    }

    @Override
    @Nonnull
    public List<ForeignKey<PupilActivityRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PUPIL_ACTIVITY__PUPIL_ACTIVITY_PUPIL_ID_FKEY, Keys.PUPIL_ACTIVITY__PUPIL_ACTIVITY_ACTIVITY_ID_FKEY);
    }

    private transient Pupil _pupil;
    private transient Activity _activity;

    /**
     * Get the implicit join path to the <code>public.pupil</code> table.
     */
    public Pupil pupil() {
        if (_pupil == null)
            _pupil = new Pupil(this, Keys.PUPIL_ACTIVITY__PUPIL_ACTIVITY_PUPIL_ID_FKEY);

        return _pupil;
    }

    /**
     * Get the implicit join path to the <code>public.activity</code> table.
     */
    public Activity activity() {
        if (_activity == null)
            _activity = new Activity(this, Keys.PUPIL_ACTIVITY__PUPIL_ACTIVITY_ACTIVITY_ID_FKEY);

        return _activity;
    }

    @Override
    @Nonnull
    public PupilActivity as(String alias) {
        return new PupilActivity(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public PupilActivity as(Name alias) {
        return new PupilActivity(alias, this);
    }

    @Override
    @Nonnull
    public PupilActivity as(Table<?> alias) {
        return new PupilActivity(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public PupilActivity rename(String name) {
        return new PupilActivity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public PupilActivity rename(Name name) {
        return new PupilActivity(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public PupilActivity rename(Table<?> name) {
        return new PupilActivity(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
