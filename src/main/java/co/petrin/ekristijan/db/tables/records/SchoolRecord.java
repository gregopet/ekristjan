/*
 * This file is generated by jOOQ.
 */
package co.petrin.ekristijan.db.tables.records;


import co.petrin.ekristijan.db.tables.School;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * A school with pupils &amp; teachers
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SchoolRecord extends UpdatableRecordImpl<SchoolRecord> implements Record2<Integer, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.school.school_id</code>.
     */
    public void setSchoolId(@Nonnull Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.school.school_id</code>.
     */
    @Nonnull
    public Integer getSchoolId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.school.name</code>. Name of the school
     */
    public void setName(@Nullable String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.school.name</code>. Name of the school
     */
    @Nullable
    public String getName() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    @Nonnull
    public Row2<Integer, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    @Nonnull
    public Field<Integer> field1() {
        return School.SCHOOL.SCHOOL_ID;
    }

    @Override
    @Nonnull
    public Field<String> field2() {
        return School.SCHOOL.NAME;
    }

    @Override
    @Nonnull
    public Integer component1() {
        return getSchoolId();
    }

    @Override
    @Nullable
    public String component2() {
        return getName();
    }

    @Override
    @Nonnull
    public Integer value1() {
        return getSchoolId();
    }

    @Override
    @Nullable
    public String value2() {
        return getName();
    }

    @Override
    @Nonnull
    public SchoolRecord value1(@Nonnull Integer value) {
        setSchoolId(value);
        return this;
    }

    @Override
    @Nonnull
    public SchoolRecord value2(@Nullable String value) {
        setName(value);
        return this;
    }

    @Override
    @Nonnull
    public SchoolRecord values(@Nonnull Integer value1, @Nullable String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SchoolRecord
     */
    public SchoolRecord() {
        super(School.SCHOOL);
    }

    /**
     * Create a detached, initialised SchoolRecord
     */
    public SchoolRecord(@Nonnull Integer schoolId, @Nullable String name) {
        super(School.SCHOOL);

        setSchoolId(schoolId);
        setName(name);
    }
}
